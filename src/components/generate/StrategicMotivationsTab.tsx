// Interface for motivation data interface Motivation { id: string; title: string; description: string; relevanceScore: number; selected: boolean; } interface StrategicMotivationsTabProps { motivations: Motivation[]; briefText: string; setBriefText: (text: string) => void; isGeneratingMotivations: boolean; handleGenerateMotivations: () => void; handleSelectMotivation: (id: string) => void; } const StrategicMotivationsTab: React.FC<StrategicMotivationsTabProps> = ({ motivations, briefText, setBriefText, isGeneratingMotivations, handleGenerateMotivations, handleSelectMotivation, }) => { return ( <Box> <Typography variant="h6" gutterBottom> Generate Strategic Motivations </Typography> <Typography variant="body2" color="text.secondary" paragraph> Upload or enter your client brief to generate strategic motivations that will inform your content creation. </Typography> <Paper sx={{ p: 3, mb: 4 }}> <Typography variant="subtitle1" gutterBottom fontWeight={600}> Client Brief </Typography> <TextField fullWidth multiline rows={6} variant="outlined" placeholder="Enter client brief text or campaign objectives here..." value={briefText} onChange={(e: React.ChangeEvent<HTMLElement>) => setBriefText(e.target.value)} sx={{ mb: 2 }} /> <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}> <Button variant="contained" onClick={handleGenerateMotivations} disabled={isGeneratingMotivations || !briefText.trim()} startIcon={isGeneratingMotivations ? <CircularProgress size={20} /> : <AutoAwesomeIcon />} > {isGeneratingMotivations ? 'Generating...' : 'Generate Motivations'} </Button> </Box> </Paper> <Typography variant="h6" gutterBottom> Strategic Motivations </Typography> <Typography variant="body2" color="text.secondary" paragraph> Select motivations to use as the foundation for your content generation. </Typography> <Grid container spacing={3}> {motivations.map((motivation: any) => ( <Grid key={motivation.id} sm={6} md={4} xs={12} sm={6} md={4}> <Card sx={{ height: '100%', border: motivation.selected ? '2px solid' : 'none', borderColor: 'primary.main', }} > <CardHeader title={motivation.title} action={ <IconButton onClick={() => handleSelectMotivation(motivation.id)} aria-label="Icon button" color={motivation.selected ? 'primary' : 'default'} > {motivation.selected ? <CheckIcon /> : <AddIcon />} </IconButton> } /> <CardContent> <Typography variant="body2" color="text.secondary" paragraph> {motivation.description} </Typography> <Box sx={{ display: 'flex', alignItems: 'center' }}> <Typography variant="body2" color="text.secondary" sx={{ mr: 1 }}> Relevance: </Typography> <Rating value={motivation.relevanceScore} precision={0.5} readOnly size="small" /> </Box> </CardContent> </Card> </Grid> ))} </Grid> <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end' }}> <Button variant="contained" disabled={motivations.filter((m: any) => m.selected).length < 1} > Next: Generate Copy </Button> </Box> </Box> ); }; export default StrategicMotivationsTab; 