name: Automated Testing Pipeline

on:
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security
          - accessibility
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
  TEST_SUITE: ${{ github.event.inputs.test_suite || 'all' }}

concurrency:
  group: test-automation-${{ github.event.inputs.environment || 'staging' }}
  cancel-in-progress: true

jobs:
  # Test environment setup
  setup:
    name: 🛠️ Setup Test Environment
    runs-on: ubuntu-latest
    
    outputs:
      test-matrix: ${{ steps.matrix.outputs.matrix }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate test matrix
        id: matrix
        run: |
          if [[ "${{ env.TEST_SUITE }}" == "all" ]]; then
            echo 'matrix=["unit", "integration", "e2e", "performance", "security", "accessibility"]' >> $GITHUB_OUTPUT
          else
            echo 'matrix=["${{ env.TEST_SUITE }}"]' >> $GITHUB_OUTPUT
          fi
          
      - name: Validate environment
        run: |
          echo "🧪 Test Configuration:"
          echo "Environment: ${{ env.TEST_ENVIRONMENT }}"
          echo "Test Suite: ${{ env.TEST_SUITE }}"
          echo "Test Matrix: ${{ steps.matrix.outputs.matrix }}"

  # Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJSON(needs.setup.outputs.test-matrix), 'unit')
    
    strategy:
      matrix:
        node-version: ['18', '20']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false
        env:
          NODE_ENV: test
          CI: true
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests-node${{ matrix.node-version }}
          name: codecov-node${{ matrix.node-version }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results/

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJSON(needs.setup.outputs.test-matrix), 'integration')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: airwave_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/airwave_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          
      - name: Run database migrations
        run: npm run db:migrate
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/airwave_test
          
      - name: Seed test data
        run: npm run db:seed:test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/airwave_test
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/airwave_test
          REDIS_URL: redis://localhost:6379
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # End-to-End Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJSON(needs.setup.outputs.test-matrix), 'e2e')
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000
          
      - name: Wait for application to be ready
        run: |
          echo "⏳ Waiting for application to start..."
          npx wait-on http://localhost:3000 --timeout 60000
          
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          TEST_BASE_URL: http://localhost:3000
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJSON(needs.setup.outputs.test-matrix), 'performance')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000
          
      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000
        
      - name: Run Lighthouse CI
        run: |
          npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Run K6 load tests
        run: |
          # Install k6
          curl https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
          
          # Run load tests
          ./k6 run tests/load/basic-load-test.js
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            .lighthouseci/
            performance-results/

  # Security Tests
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJSON(needs.setup.outputs.test-matrix), 'security')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run dependency security audit
        run: npm audit --audit-level moderate
        
      - name: Run SAST with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            
      - name: Build application for security testing
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000
          
      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000
        
      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            report_html.html
            report_md.md

  # Accessibility Tests
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJSON(needs.setup.outputs.test-matrix), 'accessibility')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000
          
      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000
        
      - name: Run axe accessibility tests
        run: npm run test:a11y
        
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: accessibility-results/

  # Test reporting and aggregation
  test-reporting:
    name: 📊 Test Reporting
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts/
          
      - name: Generate comprehensive test report
        run: |
          echo "# 📋 Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Environment: ${{ env.TEST_ENVIRONMENT }}" >> test-summary.md
          echo "## Test Suite: ${{ env.TEST_SUITE }}" >> test-summary.md
          echo "## Timestamp: $(date)" >> test-summary.md
          echo "" >> test-summary.md
          
          # Analyze test results
          echo "## Results:" >> test-summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test-summary.md
          
          cat test-summary.md
          
      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          
      - name: Create GitHub issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `❌ Automated Test Failure - ${new Date().toISOString().split('T')[0]}`,
              body: `Automated testing pipeline failed.\n\n${summary}`,
              labels: ['bug', 'automated-test-failure']
            });
            
      - name: Send notification
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ All tests passed!"
          else
            echo "❌ Some tests failed!"
          fi
          
          # Send notification to configured webhook
          curl -X POST "${{ secrets.TEST_WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🧪 Automated Test Results",
              "status": "${{ job.status }}",
              "environment": "${{ env.TEST_ENVIRONMENT }}",
              "suite": "${{ env.TEST_SUITE }}",
              "timestamp": "'$(date)'"
            }' || echo "Notification webhook not configured"