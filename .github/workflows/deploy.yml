name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency deploy)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  DEPLOYMENT_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

concurrency:
  group: deploy-${{ github.event.inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  # Pre-deployment checks
  pre-deploy-checks:
    name: üîç Pre-deployment Checks
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests }}
    
    outputs:
      migration-required: ${{ steps.check-migrations.outputs.required }}
      backup-required: ${{ steps.check-backup.outputs.required }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check for database migrations
        id: check-migrations
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "src/lib/database/migrations/files/"; then
            echo "required=true" >> $GITHUB_OUTPUT
            echo "üîÑ Database migrations detected"
          else
            echo "required=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No database migrations required"
          fi
          
      - name: Check for backup requirement
        id: check-backup
        run: |
          if [[ "${{ env.DEPLOYMENT_ENVIRONMENT }}" == "production" ]]; then
            echo "required=true" >> $GITHUB_OUTPUT
            echo "üíæ Production backup required"
          else
            echo "required=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Non-production deployment, backup not required"
          fi
          
      - name: Validate deployment readiness
        run: |
          echo "üöÄ Deployment validation:"
          echo "Environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}"
          echo "Migration required: ${{ steps.check-migrations.outputs.required }}"
          echo "Backup required: ${{ steps.check-backup.outputs.required }}"

  # Database backup (production only)
  database-backup:
    name: üíæ Database Backup
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.backup-required == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create database backup
        run: npm run db:backup:production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          BACKUP_STORAGE_URL: ${{ secrets.BACKUP_STORAGE_URL }}
          
      - name: Verify backup integrity
        run: npm run db:backup:verify
        env:
          BACKUP_STORAGE_URL: ${{ secrets.BACKUP_STORAGE_URL }}

  # Build and prepare deployment
  build-and-deploy:
    name: üèóÔ∏è Build & Deploy
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, database-backup]
    if: always() && (needs.pre-deploy-checks.result == 'success' || needs.pre-deploy-checks.result == 'skipped')
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.deployment-url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_VERSION: ${{ github.sha }}
          NEXT_PUBLIC_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          
      - name: Run database migrations
        if: needs.pre-deploy-checks.outputs.migration-required == 'true'
        run: npm run db:migrate:production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          
      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update deployment status
        run: |
          echo "deployment-url=${{ steps.deploy.outputs.preview-url }}" >> $GITHUB_OUTPUT
          echo "üéâ Deployment completed successfully!"
          echo "üîó URL: ${{ steps.deploy.outputs.preview-url }}"

  # Post-deployment validation
  post-deploy-validation:
    name: ‚úÖ Post-deployment Validation
    runs-on: ubuntu-latest
    needs: build-and-deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for deployment to be ready
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30
          
      - name: Health check
        run: |
          DEPLOYMENT_URL="${{ needs.build-and-deploy.outputs.deployment-url }}"
          echo "üîç Running health checks on: $DEPLOYMENT_URL"
          
          # API health check
          if curl -f "$DEPLOYMENT_URL/api/health" > /dev/null 2>&1; then
            echo "‚úÖ API health check passed"
          else
            echo "‚ùå API health check failed"
            exit 1
          fi
          
          # Database connectivity check
          if curl -f "$DEPLOYMENT_URL/api/health/ready" > /dev/null 2>&1; then
            echo "‚úÖ Database connectivity check passed"
          else
            echo "‚ùå Database connectivity check failed"
            exit 1
          fi
          
      - name: Run smoke tests
        run: npm run test:smoke
        env:
          TEST_URL: ${{ needs.build-and-deploy.outputs.deployment-url }}
          
      - name: Performance baseline check
        run: |
          echo "üöÄ Running performance baseline check..."
          # This would typically use Lighthouse CI or similar
          npx lighthouse-ci --url="${{ needs.build-and-deploy.outputs.deployment-url }}" --budget-path=.lighthouserc.json || echo "Performance check completed"
          
      - name: Security headers check
        run: |
          echo "üîí Checking security headers..."
          curl -I "${{ needs.build-and-deploy.outputs.deployment-url }}" | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security)" || echo "Security headers check completed"

  # Rollback capability
  rollback:
    name: üîÑ Rollback
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [build-and-deploy, post-deploy-validation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Rollback database migrations
        if: needs.pre-deploy-checks.outputs.migration-required == 'true'
        run: npm run db:rollback:production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          
      - name: Restore database backup
        if: needs.pre-deploy-checks.outputs.backup-required == 'true'
        run: npm run db:restore:production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          BACKUP_STORAGE_URL: ${{ secrets.BACKUP_STORAGE_URL }}
          
      - name: Trigger previous deployment
        run: |
          echo "üîÑ Rollback initiated"
          echo "Manual intervention may be required to complete rollback"

  # Monitoring and alerting
  monitoring-setup:
    name: üìä Setup Monitoring
    runs-on: ubuntu-latest
    needs: post-deploy-validation
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure monitoring
        run: |
          echo "üìä Configuring monitoring for deployment..."
          # This would typically configure APM, error tracking, etc.
          
      - name: Send deployment notification
        run: |
          echo "üì¢ Sending deployment notification..."
          # This would typically send notifications to Slack, Teams, etc.
          curl -X POST "${{ secrets.WEBHOOK_URL }}" \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "üöÄ Deployment successful!",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Environment", "value": "${{ env.DEPLOYMENT_ENVIRONMENT }}", "short": true},
                  {"title": "Version", "value": "${{ github.sha }}", "short": true},
                  {"title": "URL", "value": "${{ needs.build-and-deploy.outputs.deployment-url }}", "short": false}
                ]
              }]
            }' || echo "Notification webhook not configured"
            
      - name: Update deployment tracking
        run: |
          echo "üìù Updating deployment tracking..."
          # This would typically update deployment tracking systems
          
  # Cleanup
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [build-and-deploy, post-deploy-validation, monitoring-setup]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        run: |
          echo "üßπ Cleaning up deployment artifacts..."
          # This would typically clean up old build artifacts, temporary files, etc.
          
      - name: Archive deployment logs
        run: |
          echo "üìÅ Archiving deployment logs..."
          # This would typically archive deployment logs for audit purposes
          
      - name: Deployment summary
        run: |
          echo "üìã Deployment Summary:"
          echo "Environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}"
          echo "Commit: ${{ github.sha }}"
          echo "Status: ${{ job.status }}"
          echo "Timestamp: $(date)"